
 /*
 * Automatic Driving Line calculator
 *
 * License: MTI
 * Author: Optimus Racing
 */

#define PIN   5
#define NUMPIXELS   10

/*
 * Include Arduino libraries
 */
#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <TinyGPSPlus.h>


/*
 * Include C standard libraries for calculation
 */
#include <stdio.h>
#include <stdint.h>
#include <inttypes.h>
#include <stdbool.h>
#include <math.h>

/*
 * Init Neopixels
 */
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
int delayval = 500; // delay for half a second

/*
 * Init GPS
 */
TinyGPSPlus gps;

/*
 * Regular int variables.
 */
int i, final0, final1, final2, final3, final4, final5, final6, value; 
int32_t px, py;

/*
 * Define a structure to hold the coordinates data
 * 64-bit integer to utilise all decimal points.
 */
typedef struct
{
  int32_t x0, y0, x1, y1, x2, y2;
} triangle;

void setup()
  {
    // put your setup code here, to run once:
    Serial.begin(115200);
    Serial1.begin(115200);
  }

void loop()
{

  triangle a0, a1, a2, a3, a4, a5, a6;

  a0.x0 = 77.541712 * 1000000, a0.y0 = 28.366215 * 1000000, a0.x1 = 77.541994 * 1000000, a0.y1 = 28.365974 * 1000000, a0.x2 = 77.541908 * 1000000, a0.y2 = 28.366264 * 1000000;
  a1.x0 = 77.541713 * 1000000, a1.y0 = 28.366214 * 1000000, a1.x1 = 77.541807 * 1000000, a1.y1 = 28.365921 * 1000000, a1.x2 = 77.541995 * 1000000, a1.y2 = 28.365972 * 1000000;
  a2.x0 = 77.541712 * 1000000, a2.x0 = 28.366214 * 1000000, a2.x1 = 77.541692 * 1000000, a2.y1 = 28.365900 * 1000000, a2.x2 = 77.541808 * 1000000, a2.y2 = 28.365926 * 1000000;
  a3.x0 = 77.541712 * 1000000, a3.x0 = 28.366213 * 1000000, a3.x1 = 77.541604 * 1000000, a3.y1 = 28.366185 * 1000000, a3.x2 = 77.541691 * 1000000, a3.y2 = 28.365899 * 1000000;
  a4.x0 = 77.541358 * 1000000, a4.x0 = 28.366124 * 1000000, a4.x1 = 77.541689 * 1000000, a4.y1 = 28.365897 * 1000000, a4.x2 = 77.541601 * 1000000, a4.y2 = 28.366185 * 1000000;
  a5.x0 = 77.541357 * 1000000, a5.x0 = 28.366123 * 1000000, a5.x1 = 77.541448 * 1000000, a5.y1 = 28.365844 * 1000000, a5.x2 = 77.541690 * 1000000, a5.y2 = 28.365897 * 1000000;
  
  px = (gps.location.lng(), 6) * 100000;
  py = (gps.location.lat(), 6) * 100000;

  int64_t A0 = 0.5 * ((-a0.y1 * a0.x2 + a0.y0 * (-a0.x1 + a0.x2) + a0.x0 * (a0.y1 - a0.y2) + a0.x1 * a0.y2));
  int sign0 = copysign(1.0, A0); // bool sign = A < 0 ? -1 : 1;
  int64_t s0 = (a0.y0 * a0.x2 - a0.x0 * a0.y2 + (a0.y2 - a0.y0) * px + (a0.x0 - a0.x2) * py) * sign0;
  int64_t t0 = (a0.x0 * a0.y1 - a0.y0 * a0.x1 + (a0.y0 - a0.y1) * px + (a0.x1 - a0.x0) * py) * sign0;
  final0 = s0 > 0 && t0 > 0 && (s0 + t0) < 2 * A0 * sign0;

  // a1
  int64_t A1 = 0.5 * ((-a1.y1 * a1.x2 + a1.y0 * (-a1.x1 + a1.x2) + a1.x0 * (a1.y1 - a1.y2) + a1.x1 * a1.y2));
  int sign1 = copysign(1.0, A1); // bool sign = A < 0 ? -1 : 1;
  int64_t s1 = (a1.y0 * a1.x2 - a1.x0 * a1.y2 + (a1.y2 - a1.y0) * px + (a1.x0 - a1.x2) * py) * sign1;
  int64_t t1 = (a1.x0 * a1.y1 - a1.y0 * a1.x1 + (a1.y0 - a1.y1) * px + (a1.x1 - a1.x0) * py) * sign1;
  final1 = s1 > 0 && t1 > 0 && (s1 + t1) < 2 * A1 * sign1;

  // a2
  int64_t A2 = 0.5 * ((-a2.y1 * a2.x2 + a2.y0 * (-a2.x1 + a2.x2) + a2.x0 * (a2.y1 - a2.y2) + a2.x1 * a2.y2));
  int sign2 = copysign(1.0, A2); // bool sign = A < 0 ? -1 : 1;
  int64_t s2 = (a2.y0 * a2.x2 - a2.x0 * a2.y2 + (a2.y2 - a2.y0) * px + (a2.x0 - a2.x2) * py) * sign2;
  int64_t t2 = (a2.x0 * a2.y1 - a2.y0 * a2.x1 + (a2.y0 - a2.y1) * px + (a2.x1 - a2.x0) * py) * sign2;
  final2 = s2 > 0 && t2 > 0 && (s2 + t2) < 2 * A2 * sign2;

  // a3
  int64_t A3 = 0.5 * ((-a3.y1 * a3.x2 + a3.y0 * (-a3.x1 + a3.x2) + a3.x0 * (a3.y1 - a3.y2) + a3.x1 * a3.y2));
  int sign3 = copysign(1.0, A3); // bool sign = A < 0 ? -1 : 1;
  int64_t s3 = (a3.y0 * a3.x2 - a3.x0 * a3.y2 + (a3.y2 - a3.y0) * px + (a3.x0 - a3.x2) * py) * sign3;
  int64_t t3 = (a3.x0 * a3.y1 - a3.y0 * a3.x1 + (a3.y0 - a3.y1) * px + (a3.x1 - a3.x0) * py) * sign3;
  final3 = s3 > 0 && t3 > 0 && (s3 + t3) < 2 * A3 * sign3;

  // a4
  int64_t A4 = 0.5 * ((-a4.y1 * a4.x2 + a4.y0 * (-a4.x1 + a4.x2) + a4.x0 * (a4.y1 - a4.y2) + a4.x1 * a4.y2));
  int sign4 = copysign(1.0, A4); // bool sign = A < 0 ? -1 : 1;
  int64_t s4 = (a4.y0 * a4.x2 - a4.x0 * a4.y2 + (a4.y2 - a4.y0) * px + (a4.x0 - a4.x2) * py) * sign4;
  int64_t t4 = (a4.x0 * a4.y1 - a4.y0 * a4.x1 + (a4.y0 - a4.y1) * px + (a4.x1 - a4.x0) * py) * sign4;
  final4 = s4 > 0 && t4 > 0 && (s4 + t4) < 2 * A4 * sign4;

  // a5
  int64_t A5 = 0.5 * ((-a5.y1 * a5.x2 + a5.y0 * (-a5.x1 + a5.x2) + a5.x0 * (a5.y1 - a5.y2) + a5.x1 * a5.y2));
  int sign5 = copysign(1.0, A5); // bool sign = A < 0 ? -1 : 1;
  int64_t s5 = (a5.y0 * a5.x2 - a5.x0 * a5.y2 + (a5.y2 - a5.y0) * px + (a5.x0 - a5.x2) * py) * sign5;
  int64_t t5 = (a5.x0 * a5.y1 - a5.y0 * a5.x1 + (a5.y0 - a5.y1) * px + (a5.x1 - a5.x0) * py) * sign5;
  final5 = s5 > 0 && t5 > 0 && (s5 + t5) < 2 * A5 * sign5;

  // a6
  int64_t A6 = 0.5 * ((-a6.y1 * a6.x2 + a6.y0 * (-a6.x1 + a6.x2) + a6.x0 * (a6.y1 - a6.y2) + a6.x1 * a6.y2));
  int sign6 = copysign(1.0, A6); // bool sign = A < 0 ? -1 : 1;
  int64_t s6 = (a6.y0 * a6.x2 - a6.x0 * a6.y2 + (a6.y2 - a6.y0) * px + (a6.x0 - a6.x2) * py) * sign6;
  int64_t t6 = (a6.x0 * a6.y1 - a6.y0 * a6.x1 + (a6.y0 - a6.y1) * px + (a6.x1 - a6.x0) * py) * sign6;
  final6 = s6 > 0 && t6 > 0 && (s6 + t6) < 2 * A6 * sign6;

  if (final0 == 1)
  {
    pixels.setPixelColor(2, pixels.Color(0,50,0));
    pixels.setPixelColor(3, pixels.Color(0,255,0));
    pixels.setPixelColor(4, pixels.Color(0,50,0));
  }

  if (final1 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));
  }

  if(final2 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));    
  }

  if(final2 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));    
  }  

  if(final2 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));    
  }  

  if(final2 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));    
  }

  if(final2 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));    
  }

  if(final2 == 1)
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0));    
  }

  else
  {
    pixels.setPixelColor(5, pixels.Color(0,50,0));
    pixels.setPixelColor(6, pixels.Color(0,255,0));
    pixels.setPixelColor(7, pixels.Color(0,50,0)); 
  }  

  pixels.show();
  delay(10);
}


 
 
 
  // Serial.println(b1.x1);

  /*

C:

    points p0;
    p0.x = 28.353811 * 1000000;
    p0.y = 77.533542 * 1000000;

    points p1;
    p1.x = 28.353776 * 1000000;
    p1.y = 77.533681 * 1000000;

    points p2;
    p2.x = 28.353875 * 1000000;
    p2.y = 77.533487 * 1000000;

    points p;
    p.x = 28.353520 * 1000000;
    p.y = 77.533633 * 1000000;

    int32_t A = 1 / 2 * ((-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y));
    int sign = copysign(1.0, A); // bool sign = A < 0 ? -1 : 1;
    int32_t s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;
    int32_t t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;
    final = s > 0 && t > 0 && (s + t) < 2 * A * sign;



    points p0;
    p0.x = 28.353811 * 1000000;
    p0.y = 77.533542 * 1000000;

    points p1;
    p1.x = 28.353776 * 1000000;
    p1.y = 77.533681 * 1000000;

    points p2;
    p2.x = 28.353875 * 1000000;
    p2.y = 77.533487 * 1000000;

    points p;
    p.x = 28.353520 * 1000000;
    p.y = 77.533633 * 1000000;



    int32_t A = 1 / 2 * ((-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y));
    int sign = copysign(1.0, A); // bool sign = A < 0 ? -1 : 1;
    int32_t s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;
    int32_t t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;
    int final = s > 0 && t > 0 && (s + t) < 2 * A * sign;
  */
  // micros_end = micros();


  // Serial.println(Zone);
  // Serial.println(time);
  // Serial.println(latitude);
  // Serial.println(longitude);

/*
  Serial.println(A);
  Serial.println(sign);
  Serial.println(s);
  Serial.println(t);
  Serial.println(final);
*/


/*

0
1
10181
37264
0

*/

/*

#define TIMES_TO_LOOP 1000000

hello world
non-volatile uint32_t microseconds 8
constants uint32_t microseconds 1
uint16_t microseconds 62981
uint32_t microseconds 54574
uint64_t microseconds 163727
int16_t microseconds 62974
int32_t microseconds 58782
int64_t microseconds 151126
float  microseconds 58775

*/

/*
typedef struct {
  int32_t x, y;
} points;



void setup() {
  // put your setup code here, to run once:
}

void loop() {
  // put your main code here, to run repeatedly:
}
*/

/*
Javascript:
function ptInTriangle(p, p0, p1, p2) {
    var A = 1/2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);
    var sign = A < 0 ? -1 : 1;
    var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;
    var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;

    return s > 0 && t > 0 && (s + t) < 2 * A * sign;
}
Python:
[px, py] = [397.00520849227905,75.015625] #[177.00520849227905,127.015624545455]
[p0x, p0y] = [67, 475]
[p1x, p1y] = [162,78]
[p2x, p2y] = [353,369]

28.353811, 77.533542

[px, py] = [28.353811, 77.533542]
[p0x, p0y] = [28.353776, 77.533681]
[p1x, p1y] = [28.353875,77.533487]
[p2x, p2y] = [28.353520, 77.533633]




A = 1/2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y)
sign = numpy.sign(A)
s = (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py) * sign
t = (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py) * sign
print(A)
print(sign)
print(s)
print(t)
final = s > 0 and t > 0 and (s + t) < 2 * A * sign
print(final)



[px, py] = [28353811, 77533542]
[p0x, p0y] = [28353776, 77533681]
[p1x, p1y] = [28353875,77533487]
[p2x, p2y] = [28353520, 77533633]

A = (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y)
sign = numpy.sign(A)
s = (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py)
t = (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py)
print(A)
print(sign)
print(s)
print(t)
final = s > 0 and t > 0 and (s + t) < 2 * A * sign
print(final)


28.351401, 77.534500


https://stackoverflow.com/questions/1220377/latitude-longitude-storage-and-compression-in-c
https://w3schools.com/c/c_structs.php

C:

int32_t


points blue, b1, b2, b3;
blue.x1 = 77.53819495215082 * 100000000000000, blue.y1 = 28.34950144824059 * 100000000000000, blue.x2 = 77.53711509809254 * 100000000000000, blue.y2 = 28.34650631815315 * 100000000000000, blue.x3 = 77.53972073864655 * 100000000000000, blue.y3 = 28.34501542791869 * 100000000000000;
b1.x1 = 77.53812988719359 * 100000000000000, b1.y1 = 28.34914085497248 * 100000000000000, b1.x2 = 77.53832658012224 * 100000000000000, b1.y2 = 28.34851812515688 * 100000000000000, b1.x3 = 77.53829994556241 * 100000000000000, b1.y3 = 28.3490059137692 * 100000000000000;
b2.x1 = 77.53832727461854 * 100000000000000, b2.y1 = 28.34851867785261 * 100000000000000, b2.x2 = 77.53844758714672 * 100000000000000, b2.y2 = 28.34854155603643 * 100000000000000, b2.x3 = 77.53830000648465 * 100000000000000, b2.y3 = 28.34900622492224 * 100000000000000;
b3.x1 = 77.53844875094991 * 100000000000000, b3.y1 = 28.34854250856352 * 100000000000000, b3.x2 = 77.53832554009745 * 100000000000000, b3.y2 = 28.34851814519494 * 100000000000000, b3.x3 = 77.53846000954913 * 100000000000000, b3.y3 = 28.34775882099893 * 100000000000000;


*/